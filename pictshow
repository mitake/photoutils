#! /usr/bin/env python

import sys, os, pygame
import threading

display_size_x = 1024
display_size_y = 768

prev_keys = ['h', 'k']
next_keys = ['l', 'j', 'space']
quit_keys = ['q']
rot_right_keys = ['r']
rot_left_keys = ['e']
zoom_in_keys = [';']            # fubar
zoom_out_keys = ['-']

acts = []

first_load_is_done = False
first_load = threading.Condition()
def first_load_complete():
    first_load.acquire()
    first_load.notify()
    first_load.release()

def wait_first_load():
    first_load.acquire()
    while not first_load_is_done:
        first_load.wait()
    first_load.release()

index = 0
files_lock = threading.Lock()
files = []                      # list of surface
names = []
window = None

crt_surf = None                 # current showing surface
crt_scale = 1.0

max_load_files_nr = 10
max_entire_files_nr = -1
current_loaded_files_nr = 0

class PhotoLoader(threading.Thread):
    # def __init__(self):
    #     pass

    def init_files(self):
        global files, names, files_lock, first_load_is_done

        raw_files = os.listdir('.')
        raw_files.sort()
        for f in raw_files:
            try:
                srf = pygame.image.load(f)
                files_lock.acquire()
                files.append(srf)
                files_lock.release()
                names.append(f)
                
                if not first_load_is_done:
                    first_load_is_done = True
                    first_load_complete()
            except:# sys.exc_info()[0]
                continue

        if not first_load_is_done: # no photos in current directory
            first_load_is_done = True
            first_load_complete()

    def run(self):
        self.init_files()

def show_surface(surface):
    global crt_surf

    x, y = surface.get_size()
    scale = 0.0
    if y < x:
        scale = display_size_x / float(x)
    else:
        scale = display_size_y / float(y)
    surface = pygame.transform.scale(surface, (int(scale * x), int(scale * y)))

    if window.get_size() != surface.get_size():
        pygame.display.set_mode(surface.get_size())
        pygame.mouse.set_pos(window.get_size())

    window.blit(surface, (0,0))
    pygame.display.flip()
    crt_surf = surface

pict_file_names = []
surfaces = []

def show_index(idx, direction):
    if surfaces[idx] == None:
        surfaces[idx] = pygame.image.load(pict_file_names[idx])
        if max_load_files_nr < len(surfaces):
            surfaces[(idx + (direction * -1) * max_load_files_nr) % len(surfaces)] = None
    return show_surface(surfaces[idx])

def act_show_next():
    global index
    index += 1
    index %= len(surfaces)
    # files_lock.acquire()
    # index %= len(files)
    # files_lock.release()
    return show_index(index, 1)
acts.append((next_keys, act_show_next))

def act_show_next_big():
    global index
    index += 50
    index %= len(surfaces)
    return show_index(index, 1)
acts.append((['n'], act_show_next_big))

def act_show_prev():
    global index
    index -= 1
    index %= len(surfaces)
    # files_lock.acquire()
    # index %= len(files)
    # files_lock.release()
    return show_index(index, -1)
acts.append((prev_keys, act_show_prev))

def act_show_prev_big():
    global index
    index -= 50
    index %= len(surfaces)
    # files_lock.acquire()
    # index %= len(files)
    # files_lock.release()
    return show_index(index, -1)
acts.append((['p'], act_show_prev_big))

def act_rotate_right():
    show_surface(pygame.transform.rotate(crt_surf, -90))
acts.append((rot_right_keys, act_rotate_right))

def act_rotate_left():
    show_surface(pygame.transform.rotate(crt_surf, 90))
acts.append((rot_left_keys, act_rotate_left))

def act_zoom_in():
    global crt_scale
    crt_scale += 0.1
    x, y = crt_surf.get_size()
    x, y = x * crt_scale, y * crt_scale
    show_surface(pygame.transform.scale(crt_surf, (x, y)))
# acts.append((zoom_in_keys, act_zoom_in))

def act_zoom_out():
    global crt_scale
    crt_scale -= 0.1
    x, y = crt_surf.get_size()
    x, y = x * crt_scale, y * crt_scale
    show_surface(pygame.transform.scale(crt_surf, (x, y)))
# acts.append((zoom_out_keys, act_zoom_out))

def act_quit():
    sys.exit(0)
acts.append((quit_keys, act_quit))

def act_info():
    print 'current file: %s' % pict_file_names[index]
acts.append((['i'], act_info))

symlink_album_dir = ''

def act_symlink_album_add():
    if symlink_album_dir == '':
        print 'symlink album directory name is required...'
        sys.exit(1)
        
    fullpath = os.getcwd() + '/' + pict_file_names[index]
    link = symlink_album_dir + pict_file_names[index]
    try:
        os.symlink(fullpath, link)
    except OSError:
        print 'maybe %s is already added to the album...' % pict_file_names[index]

acts.append((['a'], act_symlink_album_add))

def act_symlink_album_del():
    if symlink_album_dir == '':
        print 'symlink album directory name is required...'
        sys.exit(1)
    
    link = symlink_album_dir + pict_file_names[index]
    try:
        os.unlink(link)
    except OSError:
        print 'maybe %s is not added to the album...' % pict_file_names[index]
acts.append((['d'], act_symlink_album_del))

def action(key):
    for k_lis, act in acts:
        if key in k_lis:
            act()

# init_files()
# loader = PhotoLoader()
# loader.start()

def str2list(s):
    ret = []
    for i in range(0, len(s)):
        ret.append(s[i])
    return ret

def x_contain_y(x, y, i):
    if len(y) == i:
        return True
    if x[i] == y[i]:
        return x_contain_y(x, y, i + 1)
    else:
        return False

def is_name_pictfile(_name):
    if len(_name) < 4:
        return False

    name = _name.lower()
    exts = ['jpg', 'jpeg', 'png', 'bmp']
    rext_lists = []
    for ext in exts:
        l = str2list(ext)
        l.reverse()
        rext_lists.append(l)
    rnamel = str2list(name)
    rnamel.reverse()

    for rextl in rext_lists:
        if x_contain_y(rnamel, rextl, 0):
            return True
    return False

# initialization for single thread

for i in range(0, len(sys.argv)):
    if sys.argv[i] == '--symlink-album':
        symlink_album_dir = os.getcwd() + '/' + sys.argv[i + 1] + '/'
        i += 1
        print '%s' % symlink_album_dir

def init_st():
    file_names = os.listdir('.')
    file_names.sort()
    global surfaces
    for file_name in file_names:
        if is_name_pictfile(file_name):
            pict_file_names.append(file_name)
    surfaces = [None] * len(pict_file_names)

init_st()

# wait_first_load()

pygame.init()
pygame.key.set_repeat(100, 100)
# try:
#     window = pygame.display.set_mode(files[0].get_size())
# except IndexError:              # there's no image
#     print 'no images!'
#     sys.exit(0)

surfaces[0] = pygame.image.load(pict_file_names[0])
window = pygame.display.set_mode(surfaces[0].get_size())
show_index(0, 1)                   # fixme

while True:
    e = pygame.event.poll()
    if e.type == pygame.NOEVENT:
        e = pygame.event.wait()

    if e.type == pygame.KEYDOWN:
        key = pygame.key.name(e.key)
        action(key)
